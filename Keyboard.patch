diff --git a/src/Keyboard.cpp b/src/Keyboard.cpp
index 4a948f6..8bfac20 100644
--- a/src/Keyboard.cpp
+++ b/src/Keyboard.cpp
@@ -35,35 +35,46 @@ static const uint8_t _hidReportDescriptor[] PROGMEM = {
     0xa1, 0x01,                    // COLLECTION (Application)
     0x85, 0x02,                    //   REPORT_ID (2)
     0x05, 0x07,                    //   USAGE_PAGE (Keyboard)
-   
+
   0x19, 0xe0,                    //   USAGE_MINIMUM (Keyboard LeftControl)
     0x29, 0xe7,                    //   USAGE_MAXIMUM (Keyboard Right GUI)
     0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
     0x25, 0x01,                    //   LOGICAL_MAXIMUM (1)
     0x75, 0x01,                    //   REPORT_SIZE (1)
-    
+
   0x95, 0x08,                    //   REPORT_COUNT (8)
     0x81, 0x02,                    //   INPUT (Data,Var,Abs)
     0x95, 0x01,                    //   REPORT_COUNT (1)
     0x75, 0x08,                    //   REPORT_SIZE (8)
     0x81, 0x03,                    //   INPUT (Cnst,Var,Abs)
-    
+
+  0x95, 0x05,                    //   REPORT_COUNT (5)
+    0x75, 0x01,                    //   REPORT_SIZE (1)
+    0x05, 0x08,                    //   USAGE_PAGE (LEDs)
+    0x19, 0x01,                    //   USAGE_MINIMUM (1)
+    0x29, 0x05,                    //   USAGE_MAXIMUM (5)
+    0x91, 0x02,                    //   OUTPUT (Data,Var,Abs) // LED report
+    0x95, 0x01,                    //   REPORT_COUNT (1)
+    0x75, 0x03,                    //   REPORT_SIZE (3)
+    0x91, 0x01,                    //   OUTPUT (Constant) // padding
+
   0x95, 0x06,                    //   REPORT_COUNT (6)
     0x75, 0x08,                    //   REPORT_SIZE (8)
     0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
     0x25, 0x73,                    //   LOGICAL_MAXIMUM (115)
     0x05, 0x07,                    //   USAGE_PAGE (Keyboard)
-    
+
   0x19, 0x00,                    //   USAGE_MINIMUM (Reserved (no event indicated))
     0x29, 0x73,                    //   USAGE_MAXIMUM (Keyboard Application)
     0x81, 0x00,                    //   INPUT (Data,Ary,Abs)
     0xc0,                          // END_COLLECTION
 };
 
-Keyboard_::Keyboard_(void) 
+Keyboard_::Keyboard_(void)
 {
 	static HIDSubDescriptor node(_hidReportDescriptor, sizeof(_hidReportDescriptor));
 	HID().AppendDescriptor(&node);
+    layout = 0;
 }
 
 void Keyboard_::begin(void)
@@ -79,45 +90,25 @@ void Keyboard_::sendReport(KeyReport* keys)
 	HID().SendReport(2,keys,sizeof(KeyReport));
 }
 
+# define LAYOUT_COUNT 2
 extern
-const uint8_t _asciimap[128] PROGMEM;
+const uint8_t _asciimap[LAYOUT_COUNT][96] PROGMEM;
 
-#define SHIFT 0x80
-const uint8_t _asciimap[128] =
-{
-	0x00,             // NUL
-	0x00,             // SOH
-	0x00,             // STX
-	0x00,             // ETX
-	0x00,             // EOT
-	0x00,             // ENQ
-	0x00,             // ACK  
-	0x00,             // BEL
-	0x2a,			// BS	Backspace
-	0x2b,			// TAB	Tab
-	0x28,			// LF	Enter
-	0x00,             // VT 
-	0x00,             // FF 
-	0x00,             // CR 
-	0x00,             // SO 
-	0x00,             // SI 
-	0x00,             // DEL
-	0x00,             // DC1
-	0x00,             // DC2
-	0x00,             // DC3
-	0x00,             // DC4
-	0x00,             // NAK
-	0x00,             // SYN
-	0x00,             // ETB
-	0x00,             // CAN
-	0x00,             // EM 
-	0x00,             // SUB
-	0x00,             // ESC
-	0x00,             // FS 
-	0x00,             // GS 
-	0x00,             // RS 
-	0x00,             // US 
+uint8_t Keyboard_::switchLayout(uint8_t l) {
+    if (l < LAYOUT_COUNT) {
+        layout = l;
+        return 1;
+    }
+    return 0;
+}
+
+
+#define SHIFT 0x40
+#define ALTGR 0x80
+#define SHIFTED_64_KEY 0x3F
 
+const uint8_t _asciimap[LAYOUT_COUNT][96] = {
+{
 	0x2c,		   //  ' '
 	0x1e|SHIFT,	   // !
 	0x34|SHIFT,	   // "
@@ -213,17 +204,115 @@ const uint8_t _asciimap[128] =
 	0x31|SHIFT,    // |
 	0x30|SHIFT,    // }
 	0x35|SHIFT,    // ~
-	0				// DEL
-};
+	0x2A 		   // DEL
+},
+{
+	0x2c,		   //  ' '    0x20
+	0x30|SHIFT,	   // !       0x21
+	0x1f|SHIFT,	   // "
+	0x20|ALTGR,    // #
+	0x31,          // $
+	0x22|SHIFT,    // %
+	0x23|SHIFT,    // &
+	0x2d,          // '
+	0x25|SHIFT,    // (
+	0x26|SHIFT,    // )
+	0x20|SHIFT,    // *
+	0x1e|SHIFT,    // +
+	0x36,          // ,
+	0x38,          // -
+	0x37,          // .
+	0x24|SHIFT,    // /
+	0x27,          // 0
+	0x1e,          // 1
+	0x1f,          // 2
+	0x20,          // 3
+	0x21,          // 4
+	0x22,          // 5
+	0x23,          // 6
+	0x24,          // 7
+	0x25,          // 8
+	0x26,          // 9
+	0x37|SHIFT,    // :
+	0x36|SHIFT,    // ;
+	0x3f,          // <
+	0x27|SHIFT,    // =
+	0x3f|SHIFT,      // >
+	0x2d|SHIFT,      // ?
+	0x1f|ALTGR,      // @
+	0x04|SHIFT,      // A
+	0x05|SHIFT,      // B
+	0x06|SHIFT,      // C
+	0x07|SHIFT,      // D
+	0x08|SHIFT,      // E
+	0x09|SHIFT,      // F
+	0x0a|SHIFT,      // G
+	0x0b|SHIFT,      // H
+	0x0c|SHIFT,      // I
+	0x0d|SHIFT,      // J
+	0x0e|SHIFT,      // K
+	0x0f|SHIFT,      // L
+	0x10|SHIFT,      // M
+	0x11|SHIFT,      // N
+	0x12|SHIFT,      // O
+	0x13|SHIFT,      // P
+	0x14|SHIFT,      // Q
+	0x15|SHIFT,      // R
+	0x16|SHIFT,      // S
+	0x17|SHIFT,      // T
+	0x18|SHIFT,      // U
+	0x19|SHIFT,      // V
+	0x1a|SHIFT,      // W
+	0x1b|SHIFT,      // X
+	0x1c|SHIFT,      // Y
+	0x1d|SHIFT,      // Z
+	0x2f|ALTGR,    // [
+	0x3F|ALTGR,    // bslash
+	0x30|ALTGR,    // ]
+	0x2e,          // ^
+	0x38|SHIFT,    // _
+	0x2e|SHIFT,    // `
+	0x04,          // a
+	0x05,          // b
+	0x06,          // c
+	0x07,          // d
+	0x08,          // e
+	0x09,          // f
+	0x0a,          // g
+	0x0b,          // h
+	0x0c,          // i
+	0x0d,          // j
+	0x0e,          // k
+	0x0f,          // l
+	0x10,          // m
+	0x11,          // n
+	0x12,          // o
+	0x13,          // p
+	0x14,          // q
+	0x15,          // r
+	0x16,          // s
+	0x17,          // t
+	0x18,          // u
+	0x19,          // v
+	0x1a,          // w
+	0x1b,          // x
+	0x1d,          // y
+	0x1c,          // z
+	0x34|ALTGR,    // {
+	0x24|ALTGR,    // |
+	0x31|ALTGR,    // }
+	0x2e|ALTGR,    // ~
+	0x2a           // DEL
+}};
 
 
 uint8_t USBPutChar(uint8_t c);
 
 // press() adds the specified key (printing, non-printing, or modifier)
-// to the persistent key report and sends the report.  Because of the way 
-// USB HID works, the host acts like the key remains pressed until we 
+// to the persistent key report and sends the report.  Because of the way
+// USB HID works, the host acts like the key remains pressed until we
 // call release(), releaseAll(), or otherwise clear the report and resend.
-size_t Keyboard_::press(uint8_t k) 
+size_t Keyboard_::press(uint8_t k)
 {
 	uint8_t i;
 	if (k >= 136) {			// it's a non-printing key (not a modifier)
@@ -231,24 +320,59 @@ size_t Keyboard_::press(uint8_t k)
 	} else if (k >= 128) {	// it's a modifier key
 		_keyReport.modifiers |= (1<<(k-128));
 		k = 0;
-	} else {				// it's a printing key
-		k = pgm_read_byte(_asciimap + k);
+	} else if (k < 0x20) { // take care of 0x00-0x1F
+        if (k == 0x08) {
+            k = 0x2a; // BS	Backspace
+        } else if (k == 0x09) {
+            k = 0x2b; // TAB	Tab
+        } else if (k == 0x0a) {
+	        k = 0x28; // LF	Enter
+        } else {
+            k = 0;
+        }
+    } else {            // it's a printing key
+		k = pgm_read_byte(&_asciimap[layout][k - 0x20]);
 		if (!k) {
 			setWriteError();
 			return 0;
 		}
-		if (k & 0x80) {						// it's a capital letter or other character reached with shift
-			_keyReport.modifiers |= 0x02;	// the left shift modifier
-			k &= 0x7F;
+        if (k & ALTGR) {
+            k &= ~ALTGR;
+            _keyReport.modifiers |= 0x40;
+            sendReport(&_keyReport);        // send a separate report containing ALTGR modifier change
+            delay(5);
+        }
+		if (k & SHIFT) {	// it's a capital letter or other character reached with shift
+			k &= ~SHIFT;
+            if (k >= 0x04 && k <= 0x1d) {   // A-Z need modifier only if CAPS_LOCK is not active
+                if (!(getLedStatus() & LED_CAPS_LOCK)) {
+			        _keyReport.modifiers |= 0x02;	// the left shift modifier
+                    sendReport(&_keyReport);        // send a separate report containing key modifier change
+                    delay(5);
+                }
+            } else {
+			    _keyReport.modifiers |= 0x02;	// the left shift modifier
+                sendReport(&_keyReport);        // send a separate report containing key modifier change
+                delay(5);
+            }
+		} else {
+            // lower case when caps is pressed needs shift
+            if (k >= 0x04 && k <= 0x1d && (getLedStatus() & LED_CAPS_LOCK)) {
+                _keyReport.modifiers |= 0x02;
+                sendReport(&_keyReport);
+                delay(5);
+            }
 		}
+        if (k == 0x3F) {
+            k = 0x64;
+        }
 	}
-	
 	// Add k to the key report only if it's not already present
 	// and if there is an empty slot.
-	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k && 
+	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
 		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
 		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {
-		
+
 		for (i=0; i<6; i++) {
 			if (_keyReport.keys[i] == 0x00) {
 				_keyReport.keys[i] = k;
@@ -258,7 +382,7 @@ size_t Keyboard_::press(uint8_t k)
 		if (i == 6) {
 			setWriteError();
 			return 0;
-		}	
+		}
 	}
 	sendReport(&_keyReport);
 	return 1;
@@ -267,7 +391,7 @@ size_t Keyboard_::press(uint8_t k)
 // release() takes the specified key out of the persistent key report and
 // sends the report.  This tells the OS the key is no longer pressed and that
 // it shouldn't be repeated any more.
-size_t Keyboard_::release(uint8_t k) 
+size_t Keyboard_::release(uint8_t k)
 {
 	uint8_t i;
 	if (k >= 136) {			// it's a non-printing key (not a modifier)
@@ -276,16 +400,16 @@ size_t Keyboard_::release(uint8_t k)
 		_keyReport.modifiers &= ~(1<<(k-128));
 		k = 0;
 	} else {				// it's a printing key
-		k = pgm_read_byte(_asciimap + k);
+		k = pgm_read_byte(&_asciimap[layout][k - 0x20]);
 		if (!k) {
 			return 0;
 		}
-		if (k & 0x80) {							// it's a capital letter or other character reached with shift
+		if (k & SHIFT) {							// it's a capital letter or other character reached with shift
 			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
-			k &= 0x7F;
+			k &= ~SHIFT;
 		}
 	}
-	
+
 	// Test the key report to see if k is present.  Clear it if it exists.
 	// Check all positions in case the key is present more than once (which it shouldn't be)
 	for (i=0; i<6; i++) {
@@ -301,11 +425,11 @@ size_t Keyboard_::release(uint8_t k)
 void Keyboard_::releaseAll(void)
 {
 	_keyReport.keys[0] = 0;
-	_keyReport.keys[1] = 0;	
+	_keyReport.keys[1] = 0;
 	_keyReport.keys[2] = 0;
-	_keyReport.keys[3] = 0;	
+	_keyReport.keys[3] = 0;
 	_keyReport.keys[4] = 0;
-	_keyReport.keys[5] = 0;	
+	_keyReport.keys[5] = 0;
 	_keyReport.modifiers = 0;
 	sendReport(&_keyReport);
 }
@@ -332,6 +456,10 @@ size_t Keyboard_::write(const uint8_t *buffer, size_t size) {
 	return n;
 }
 
+uint8_t Keyboard_::getLedStatus(void) {
+	return HID().getKeyboardLedsStatus();
+}
+
 Keyboard_ Keyboard;
 
 #endif
diff --git a/src/Keyboard.h b/src/Keyboard.h
index 96882d8..f673ae2 100644
--- a/src/Keyboard.h
+++ b/src/Keyboard.h
@@ -84,6 +84,13 @@
 #define KEY_F24       0xFB
 
 
+#define KEY_NUM_LOCK       0xDB
+#define KEY_SCROLL_LOCK    0xCF
+
+#define LED_CAPS_LOCK      0x02
+#define LED_NUM_LOCK       0x01
+#define LED_SCROLL_LOCK    0x04
+
 //  Low level key report: up to 6 keys and shift, ctrl etc at once
 typedef struct
 {
@@ -97,6 +104,7 @@ class Keyboard_ : public Print
 private:
   KeyReport _keyReport;
   void sendReport(KeyReport* keys);
+  uint8_t layout;
 public:
   Keyboard_(void);
   void begin(void);
@@ -106,6 +114,8 @@ public:
   size_t press(uint8_t k);
   size_t release(uint8_t k);
   void releaseAll(void);
+  uint8_t getLedStatus(void);
+  uint8_t switchLayout(uint8_t l);
 };
 extern Keyboard_ Keyboard;
 
